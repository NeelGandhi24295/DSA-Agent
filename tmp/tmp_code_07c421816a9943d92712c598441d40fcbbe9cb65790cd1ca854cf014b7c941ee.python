code = '''
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            last = self.head
            while last.next:
                last = last.next
            last.next = new_node

    def delete(self, key):
        temp = self.head

        if temp is not None:
            if temp.data == key:
                self.head = temp.next
                temp = None
                return

        while temp is not None:
            if temp.data == key:
                break
            prev = temp
            temp = temp.next

        if temp is None:
            return

        prev.next = temp.next
        temp = None

    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False

    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

# Test cases
if __name__ == "__main__":
    llist = LinkedList()
    
    # Test case 1: Insert elements and print list
    llist.insert(1)
    llist.insert(2)
    llist.insert(3)
    print("Test Case 1: Insert and Print List")
    llist.print_list()  # Expected Output: 1 -> 2 -> 3 -> None

    # Test case 2: Delete an element and print list
    llist.delete(2)
    print("\\nTest Case 2: Delete an Element and Print List")
    llist.print_list()  # Expected Output: 1 -> 3 -> None

    # Test case 3: Search for an element
    print("\\nTest Case 3: Search for Elements")
    print("Find 3:", llist.search(3))  # Expected Output: True
    print("Find 4:", llist.search(4))  # Expected Output: False
'''

with open("solutions.py", "w") as f:
    f.write(code)
