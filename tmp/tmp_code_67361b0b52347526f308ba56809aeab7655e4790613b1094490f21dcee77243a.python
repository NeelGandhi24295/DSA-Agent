class Queue:
    def __init__(self):
        self.items = []
    
    def is_empty(self):
        return len(self.items) == 0
    
    def enqueue(self, item):
        self.items.append(item)
    
    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        raise IndexError("dequeue from empty queue")

    def front(self):
        if not self.is_empty():
            return self.items[0]
        raise IndexError("front from empty queue")
    
    def size(self):
        return len(self.items)

# Test the queue implementation with some test cases
if __name__ == "__main__":
    q = Queue()
    
    # Test case 1: Attempt to dequeue from an empty queue
    try:
        print(q.dequeue())
    except IndexError as e:
        print(e)  # Should raise an "dequeue from empty queue" error
    
    # Test case 2: Enqueue elements into the queue and then dequeue
    q.enqueue(1)
    q.enqueue(2)
    q.enqueue(3)
    print(q.dequeue())  # Should print 1
    print(q.front())    # Should print 2
    print(q.size())     # Should print 2
    
    # Test case 3: Check if queue is empty
    print(q.is_empty()) # Should print False
    
    # Dequeue remaining elements
    print(q.dequeue())  # Should print 2
    print(q.dequeue())  # Should print 3
    print(q.is_empty()) # Should print True
