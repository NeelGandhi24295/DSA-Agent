code = """
class Stack:
    def __init__(self):
        self.items = []
    
    def is_empty(self):
        return len(self.items) == 0
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            return "Stack is empty"
    
    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            return "Stack is empty"
    
    def size(self):
        return len(self.items)
    
    def display(self):
        return self.items

# Test Cases
stack = Stack()

# Test Case 1: Push elements
stack.push(1)
stack.push(2)
stack.push(3)
print("After pushing 1, 2, 3:", stack.display())  # Expected: [1, 2, 3]

# Test Case 2: Pop an element
print("Popped element:", stack.pop())  # Expected: 3
print("After popping:", stack.display())  # Expected: [1, 2]

# Test Case 3: Peek top element
print("Top element:", stack.peek())  # Expected: 2
print("After peeking:", stack.display())  # Expected: [1, 2]
"""
with open("solutions.py", "w") as f:
    f.write(code)
